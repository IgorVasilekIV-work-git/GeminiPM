import os
import json
import logging
from pyrogram import Client, filters
from pyrogram.types import Message
import google.generativeai as genai

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
CONFIG_FILE = "config.json"

class GeminiUserbot:
    def __init__(self):
        self.user_states = {}
        self.config = self.load_config()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Pyrogram –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —é–∑–µ—Ä–±–æ—Ç–∞
        self.app = Client(
            "gemini_userbot",
            api_id=self.config.get("api_id"),
            api_hash=self.config.get("api_hash"),
            phone_number=self.config.get("phone_number")  # –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        )
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.register_handlers()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini
        if self.config.get("gemini_api_key"):
            genai.configure(api_key=self.config["gemini_api_key"])

    def load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        config = {
            "api_id": "",
            "api_hash": "",
            "phone_number": "",  # –ù–∞–ø—Ä–∏–º–µ—Ä: "+79991234567"
            "gemini_api_key": "",
            "user_states": {}
        }
        
        try:
            if os.path.exists(CONFIG_FILE):
                with open(CONFIG_FILE, "r") as f:
                    loaded = json.load(f)
                    config.update(loaded)
                    # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    self.user_states = loaded.get("user_states", {})
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
            
        return config

    def save_config(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª"""
        try:
            self.config["user_states"] = self.user_states
            with open(CONFIG_FILE, "w") as f:
                json.dump(self.config, f, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞: {e}")

    def register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        
        @self.app.on_message(filters.command("gpt") & filters.private)
        async def gpt_command(client: Client, message: Message):
            user_id = message.from_user.id
            args = message.command
            
            if len(args) < 2:
                await message.reply("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/gpt on` –∏–ª–∏ `/gpt off`")
                return
                
            state = args[1].lower()
            if state == "on":
                if self.user_states.get(user_id):
                    await message.reply("‚úÖ **Gemini —É–∂–µ –≤–∫–ª—é—á–µ–Ω!**")
                else:
                    self.user_states[user_id] = True
                    self.save_config()
                    await message.reply("üü¢ **Gemini –≤–∫–ª—é—á–µ–Ω! –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.**")
                    
            elif state == "off":
                if not self.user_states.get(user_id):
                    await message.reply("‚ùå **Gemini —É–∂–µ –≤—ã–∫–ª—é—á–µ–Ω!**")
                else:
                    self.user_states[user_id] = False
                    self.save_config()
                    await message.reply("üî¥ **Gemini –≤—ã–∫–ª—é—á–µ–Ω! –û—Ç–≤–µ—Ç—ã –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–µ–∫—Ä–∞—â–µ–Ω—ã.**")
                    
            else:
                await message.reply("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/gpt on` –∏–ª–∏ `/gpt off`")
        
        @self.app.on_message(filters.command("setkey") & filters.private)
        async def set_key(client: Client, message: Message):
            args = message.command
            if len(args) < 2:
                await message.reply("‚ÑπÔ∏è –£–∫–∞–∂–∏—Ç–µ API –∫–ª—é—á: `/setkey –≤–∞—à_–∫–ª—é—á`")
                return
                
            new_key = args[1]
            self.config["gemini_api_key"] = new_key
            self.save_config()
            genai.configure(api_key=new_key)
            await message.reply("üîë **API –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!**")
        
        @self.app.on_message(filters.private & filters.incoming & filters.text & ~filters.command)
        async def handle_message(client: Client, message: Message):
            user_id = message.from_user.id
            
            # –ï—Å–ª–∏ Gemini –≤—ã–∫–ª—é—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if not self.user_states.get(user_id):
                return
                
            # –ï—Å–ª–∏ API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            if not self.config.get("gemini_api_key"):
                await message.reply("‚ùå **API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setkey –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–ª—é—á–∞**")
                return
                
            try:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "–ø–µ—á–∞—Ç–∞–µ—Ç"
                await client.send_chat_action(message.chat.id, "typing")
                
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ Gemini
                model = genai.GenerativeModel('gemini-pro')
                response = model.generate_content(message.text)
                
                await message.reply(response.text)
            except Exception as e:
                logger.error(f"Gemini error: {e}")
                await message.reply(f"‚ö†Ô∏è **–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞:**\n{str(e)}")

    def run(self):
        """–ó–∞–ø—É—Å–∫ —é–∑–µ—Ä–±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ —é–∑–µ—Ä–±–æ—Ç–∞ Gemini AI...")
        self.app.run()

if __name__ == "__main__":
    userbot = GeminiUserbot()
    userbot.run()
